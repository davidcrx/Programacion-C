{
  "name": "Programacion-c",
  "tagline": "Notas sobre el Lenguaje C y sus herramientas",
  "body": "# Programacion en C\r\n\r\n## Lista de temas \r\n\r\n1. Como compilar y correr programas.\r\n - Escribiendo un programa.\r\n - Compilando y ejecutando un programa en C.\r\n\r\n2. El entorno de programación en Linux\r\n - El shell.\r\n - Sistema de archivos.\r\n - Programas de Linea de comandos.\r\n - Parando o interrupiendo programas.\r\n - Corriendo tus programas.\r\n - Redirigiendo entradas y salidas. \r\n\r\n3. Conociendo algunos editores\r\n - Usando EL EDITOR [nano](https://www.nanotutoriales.com/tutorial-del-editor-de-texto-nano).\r\n - Usando [gedit](https://help.gnome.org/users/gedit/stable/).\r\n - Otros editores: [sublime Text](http://www.sublimetext.com/), [vim](http://www.sromero.org/wiki/linux/aplicaciones/manual_vim), etc.\r\n\r\n4. Herramientas de Compilación \r\n - El compilador de GNU, [gcc](https://gcc.gnu.org/).\r\n - [Make](https://www.gnu.org/software/make/).\r\n\r\n5. Herramientas de depuración\r\n\r\n - Depuración en general.\r\n - El depurador GNU  gdb.\r\n - Estrategias de depuración.\r\n - Aplicaciones de gdb.\r\n - [Valgrind](http://valgrind.org/).\r\n\r\n6. Optimización del rendimiento.\r\n \r\n7. Introducción a las versiones de control.\r\n\r\n8. El Lenguaje de Programación C.\r\n\r\n - Estructura de un programa en C\r\n - Tipos de datos númericos.\r\n - `size_t` y `ptrdiff_t`\r\n - Tipos de dato punto flotante.\r\n - Precedencia de operadores.\r\n - Estilo de Programación.\r\n - Variables.\r\n - Entradas y Salidas.\r\n - Declaraciones y Estructuras de Control.\r\n - Funciones.\r\n - Punteros.\r\n - Cadenas.\r\n - Tipos de datos estructurados: `struct`, `unions`, `Enums`\r\n - Uso de `typedef`.\r\n - Macros.\r\n\r\n## Lista de Libros de C\r\n\r\n- [Versión preliminar del libro de C de Jens Gustedt: Modern C](http://icube-icps.unistra.fr/img_auth.php/d/db/ModernC.pdf).\r\n- [Libro online de C de Zed A. Shaw](http://c.learncodethehardway.org/book/).\r\n- [Lecturas del curso Effective Programming in C and Unix de Carnegie Mellon ](https://www.cs.cmu.edu/~guna/15-123S11/).\r\n\r\n\r\n## Algunos artículos importantes\r\n- [Notas sobre C](http://www.cs.yale.edu/homes/aspnes/classes/223/notes.html)\r\n- [Algunas notas de Make](http://www.cs.swarthmore.edu/~newhall/unixhelp/howto_makefiles.html).\r\n- [Una introducción a los punteros](http://www.codeproject.com/Articles/627/A-Beginner-s-Guide-to-Pointers).\r\n- [Articulo sobre punteros](http://bitflop.com/tutorials/pointers-in-c.html).\r\n- [Linux y otros lenguajes](http://www.cs.swarthmore.edu/~newhall/unixlinks.html#lang).\r\n- [Tutorial de Valgrind](http://pages.cs.wisc.edu/~bart/537/valgrind.html).\r\n- [Ejemplos del uso de Make](http://mrbook.org/blog/tutorials/make/).\r\n- [Pasos que recorre un  programa en C, hasta que llega a ser un ejecutable en Linux](http://www.thegeekstuff.com/2011/10/c-program-to-an-executable/).\r\n- [Compiladores](https://msdn.microsoft.com/en-us/magazine/dn904673.aspx).\r\n- [Inteprete vs compilador](http://techwelkin.com/compiler-vs-interpreter).\r\n- [Linker](http://www.lurklurk.org/linkers/linkers.html).\r\n- [Punteros en C y C++](http://www.augustcouncil.com/~tgibson/tutorial/ptr.html).\r\n- [GDB](http://www.thegeekstuff.com/2014/03/few-gdb-commands/).\r\n- [Como evitar la fuga de memoria (Memory Leak)](https://mousomer.wordpress.com/2010/11/03/simple-rules-to-avoid-memory-leaks-in-c/).\r\n- [Depuracion en c/c++](http://www.cs.yale.edu/homes/aspnes/pinewiki/C%282f%29Debugging.html).\r\n- [El arte perdido del empaquetado en C](http://www.catb.org/esr/structure-packing/).\r\n\r\n## Herramientas \r\n\r\n### Editor Vim\r\n\r\n[vim](http://www.vim.org/), un editor de texto que dispone de diferentes modos entre los que se alternan ciertas operaciones, comunes entre los programadores. No obstante, debido a su eficiencia, a su variedad de añadidos (\"plugins\")\", y a sus posibilidades de personalización vim es uno de los editores de texto más populares para programadores y usuarios de sistemas tipo Unix (junto con Emacs*).\r\n\r\nExiste un tutorial, que se puede utilizar dentro de Linux (Ubuntu 14.04), escribiendo en el terminal.\r\n\r\n```bash\r\nc-lara@Lara:~$ vimtutor\r\n```\r\n\r\nOtras fuentes de referencia son:\r\n\r\n1 . [Vim en archlinux](https://wiki.archlinux.org/index.php/Vim_%28Espa%C3%B1ol%29).\r\n\r\n2 . [Tutorial de Vim](http://www.sromero.org/wiki/linux/aplicaciones/manual_vim).\r\n\r\n3 . [Learn Vim Progressively](http://yannesposito.com/Scratch/en/blog/Learn-Vim-Progressively/).\r\n\r\n\r\n### Git y Github\r\n\r\n[Git](https://git-scm.com/) es un sistema de control de versiones de gran potencia y versatilidad en el manejo de un gran número de archivos de  código fuente a a través del desarrollo no lineal, es decir vía la gestión rápida de ramas y mezclado de diferentes versiones.\r\n\r\nPara poder revisar y aprender los comandos necesarios de Git, puedes darle una ojeada al excelente [tutorial de CodeSchool](https://try.github.io/levels/1/challenges/1) o a la [guía](http://rogerdudler.github.io/git-guide/index.es.html) de Roger Dudle para aprender  Git.\r\n\r\n[Github](https://github.com/) es una plataforma de desarrollo colaborativo de software utilizado para alojar proyectos (muchos proyectos importantes como paquetes de R, Django, el Kernel de Linux, se encuentran alojados ahí) utilizando Git y el framework Ruby on Rails.\r\n\r\nPodemos instalar Git en Ubuntu utilizando el administrador de paquetes `Apt`:\r\n\r\n```bash\r\nc-lara@Lara:~$sudo apt-get update\r\nc-lara@Lara:~$sudo apt-get install git\r\n```\r\n\r\n\r\n\r\n\r\n",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}